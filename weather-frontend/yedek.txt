/* ========================================================================= */
/* === CRITICAL FIXES === */
/* ========================================================================= */

/* Yağmur efektinin GÖRÜNMESİ için gerekli animasyon tanımları */
.raindrop {
  position: absolute;
  width: 2px;
  height: 15px;
  background: linear-gradient(to bottom, 
    rgba(173, 216, 230, 0.95) 0%,
    rgba(135, 206, 250, 0.7) 40%,
    rgba(70, 130, 180, 0.4) 100%);
  border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;
  top: -20px;
  z-index: var(--z-rain);
  animation: fall linear infinite; /* BU SATIR ÇOK ÖNEMLİ */
  animation-timing-function: cubic-bezier(0.55, 0.085, 0.68, 0.53);
  animation-iteration-count: infinite;
  box-shadow: 
    0 0 8px rgba(135, 206, 250, 0.9),
    inset 0 -2px 2px rgba(255, 255, 255, 0.4);
  transform-origin: top center;
  filter: brightness(1.1);
}

.raindrop.heavy-drop {
  width: 3px;
  height: 22px;
  background: linear-gradient(to bottom, 
    rgba(100, 149, 237, 0.95) 0%,
    rgba(65, 105, 225, 0.8) 100%);
  box-shadow: 
    0 0 10px rgba(100, 149, 237, 1),
    inset 0 -3px 3px rgba(255, 255, 255, 0.5);
  animation: fall linear infinite; /* BU SATIR ÇOK ÖNEMLİ */
  animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
}

.raindrop.windy-drop {
  animation: fallWindy linear infinite; /* BU SATIR ÇOK ÖNEMLİ */
}

/* Sisli havalarda YAZI OKUNABİLİRLİĞİ için container opacity artırma */
.home-bg.foggy .home-container {
  background: rgba(15, 23, 42, 0.95) !important; /* Daha opak arka plan */
  backdrop-filter: blur(30px) saturate(200%) !important;
  border: 1px solid rgba(255, 255, 255, 0.25) !important;
  box-shadow: 
    0 20px 40px rgba(0, 0, 0, 0.5),
    0 0 100px rgba(59, 130, 246, 0.2),
    0 8px 32px rgba(0, 0, 0, 0.6),
    inset 0 1px 0 rgba(255, 255, 255, 0.15),
    inset 0 -1px 0 rgba(0, 0, 0, 0.3) !important;
}

/* Sis efektinin opaklığını AZALTMA - yazılar görünsün diye */
.home-bg.foggy .fog-layer {
  opacity: 0.4 !important; /* Önceki değer 0.7 idi */
  mix-blend-mode: soft-light;
}

.home-bg.foggy .fog-1 {
  opacity: 0.3 !important;
}

.home-bg.foggy .fog-2 {
  opacity: 0.2 !important;
  filter: blur(8px) !important;
}

/* Gündüz açık hava için gradient */
.home-bg.açık:not(.night) {
  background: linear-gradient(135deg, #74b9ff 0%, #0984e3 50%, #6c5ce7 100%);
  animation: daytimeGradient 20s ease infinite;
}

.home-bg.daytime {
  background: linear-gradient(135deg, #74b9ff 0%, #0984e3 50%, #6c5ce7 100%);
  animation: daytimeGradient 20s ease infinite;
}

@keyframes daytimeGradient {
  0%, 100% { 
    background-position: 0% 50%;
    filter: brightness(1.05) saturate(1.1);
  }
  50% { 
    background-position: 100% 50%;
    filter: brightness(1.1) saturate(1.2);
  }
}

/* ========================================================================= */
/* === MEVCUT PROFESYONEL STİLLER (Aynı kalacak) === */
/* ========================================================================= */

:root {
  --primary-gradient: linear-gradient(135deg, #2c3e50 0%, #4a6274 50%, #3498db 100%);
  --sunny-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
  --cloudy-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  --rainy-gradient: linear-gradient(135deg, #2c3e50 0%, #4ca1af 100%);
  --foggy-gradient: linear-gradient(135deg, #bdc3c7 0%, #2c3e50 100%);
  --night-gradient: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
  --cold-gradient: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
  --hot-gradient: linear-gradient(135deg, #ffeaa7 0%, #d63031 100%);
  
  --glass-bg: rgba(15, 23, 42, 0.85);
  --glass-border: rgba(255, 255, 255, 0.15);
  --glass-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  
  --z-stars: 1;
  --z-fog: 2;
  --z-clouds: 3;
  --z-sun: 4;
  --z-wind: 5;
  --z-rain: 6;
  --z-snow: 7;
  --z-overlay: 8;
  --z-container: 20;
}

* {
  box-sizing: border-box;
}

.home-bg {
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background: var(--primary-gradient);
  background-size: 400% 400%;
  background-position: center;
  overflow: hidden;
  position: relative;
  animation: gradientShift 25s ease infinite;
  font-family: 'Inter', 'Segoe UI', system-ui, -apple-system, sans-serif;
  transition: all 1.2s cubic-bezier(0.4, 0, 0.2, 1);
  padding: 20px;
}

.background-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: 
    radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.15) 0%, transparent 50%),
    radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.08) 0%, transparent 50%),
    radial-gradient(circle at 40% 40%, rgba(255, 255, 255, 0.05) 0%, transparent 70%);
  z-index: var(--z-overlay);
  pointer-events: none;
}

.weather-background-vignette {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(ellipse at center, transparent 40%, rgba(0, 0, 0, 0.3) 100%);
  z-index: var(--z-overlay);
  pointer-events: none;
}

@keyframes gradientShift {
  0%, 100% { 
    background-position: 0% 50%; 
    filter: brightness(1);
  }
  50% { 
    background-position: 100% 50%; 
    filter: brightness(1.05);
  }
}

.home-bg.güneşli {
  background: var(--sunny-gradient);
  animation: sunnyGradient 18s ease infinite;
}

@keyframes sunnyGradient {
  0%, 100% { 
    background-position: 0% 50%;
    filter: brightness(1.1) saturate(1.1);
  }
  50% { 
    background-position: 100% 50%;
    filter: brightness(1.2) saturate(1.2);
  }
}

.home-bg.bulutlu {
  background: var(--cloudy-gradient);
  animation: cloudyGradient 20s ease infinite;
}

.home-bg.yağmurlu,
.home-bg.sağanak {
  background: var(--rainy-gradient);
  animation: rainyGradient 15s ease infinite;
}

.home-bg.foggy {
  background: var(--foggy-gradient);
  animation: foggyGradient 30s ease infinite;
}

.home-bg.night {
  background: var(--night-gradient);
  animation: nightGradient 40s ease infinite;
}

.home-bg.cold {
  background: var(--cold-gradient);
  animation: coldGradient 20s ease infinite;
}

.home-bg.hot {
  background: var(--hot-gradient);
  animation: hotGradient 20s ease infinite;
}

.home-bg.windy {
  animation-duration: 12s;
  animation-timing-function: ease-in-out;
}

.home-container {
  position: relative;
  z-index: var(--z-container);
  background: var(--glass-bg);
  padding: 48px 64px;
  border-radius: 32px;
  backdrop-filter: blur(25px) saturate(200%);
  border: 1px solid var(--glass-border);
  box-shadow: 
    var(--glass-shadow),
    0 0 100px rgba(59, 130, 246, 0.15),
    0 8px 32px rgba(0, 0, 0, 0.4),
    inset 0 1px 0 rgba(255, 255, 255, 0.1),
    inset 0 -1px 0 rgba(0, 0, 0, 0.2);
  animation: containerEntrance 1s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  max-width: 90%;
  width: auto;
  min-width: 400px;
}

@keyframes containerEntrance {
  0% {
    opacity: 0;
    transform: translateY(40px) scale(0.95) rotateX(5deg);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1) rotateX(0);
  }
}

.star {
  position: absolute;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 50%;
  animation: twinkle 4s ease-in-out infinite;
  z-index: var(--z-stars);
  box-shadow: 0 0 8px rgba(255, 255, 255, 0.8);
}

@keyframes twinkle {
  0%, 100% { 
    opacity: 0.2; 
    transform: scale(0.8);
  }
  50% { 
    opacity: 1; 
    transform: scale(1.2);
    box-shadow: 0 0 12px rgba(255, 255, 255, 1);
  }
}

.snowflake {
  position: absolute;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 50%;
  top: -10px;
  z-index: var(--z-snow);
  animation: snowFall linear infinite;
  box-shadow: 0 0 6px rgba(255, 255, 255, 0.8);
  filter: blur(0.5px);
}

@keyframes snowFall {
  0% {
    transform: translateY(0) translateX(0) rotate(0deg);
    opacity: 0.8;
  }
  70% {
    transform: translateY(70vh) translateX(20px) rotate(180deg);
    opacity: 0.6;
  }
  100% {
    transform: translateY(110vh) translateX(30px) rotate(360deg);
    opacity: 0;
  }
}

@keyframes fall {
  0% { 
    transform: translateY(0) rotate(0deg); 
    opacity: 0.9; 
  }
  80% {
    opacity: 0.7;
  }
  100% { 
    /* Düzeltme: Düşüş mesafesi 180vh yapıldı */
    transform: translateY(180vh) rotate(1deg); 
    opacity: 0; 
  }
}

@keyframes fallWindy {
  0% { 
    transform: translate(0, 0) rotate(8deg); 
    opacity: 0.9; 
  }
  50% {
    /* Düzeltme: Orta nokta orantılı olarak 90vh yapıldı */
    transform: translate(15px, 95vh) rotate(10deg); 
  }
  100% { 
    /* Düzeltme: Düşüş mesafesi 180vh yapıldı */
    transform: translate(25px, 190vh) rotate(8deg); 
    opacity: 0; 
  }
}

.wind-line {
  position: absolute;
  width: 220px;
  height: 1px;
  background: linear-gradient(90deg, 
    transparent 0%, 
    rgba(255, 255, 255, 0.9) 15%,
    rgba(255, 255, 255, 1) 50%,
    rgba(255, 255, 255, 0.9) 85%,
    transparent 100%);
  left: -250px;
  border-radius: 1px;
  animation: moveWind 3s linear infinite;
  z-index: var(--z-wind);
  filter: blur(0.6px);
  transform-origin: left center;
  will-change: transform, opacity;
}

.wind-line:nth-child(odd) {
  animation-name: moveWindSwirling;
  filter: blur(1px);
  opacity: 0.5;
  background: linear-gradient(90deg, 
    transparent 0%, 
    rgba(255, 255, 255, 0.7) 20%,
    rgba(255, 255, 255, 0.9) 50%,
    rgba(255, 255, 255, 0.7) 80%,
    transparent 100%);
}

@keyframes moveWind {
  0% { 
    left: -250px; 
    opacity: 0; 
    transform: translateY(0) rotate(0deg);
  }
  15% { 
    opacity: 0.8; 
  }
  60% {
    transform: translateY(6px) rotate(0.3deg);
  }
  85% { 
    opacity: 0.4; 
  }
  100% { 
    left: 120%; 
    opacity: 0; 
    transform: translateY(-4px) rotate(-0.3deg);
  }
}

@keyframes moveWindSwirling {
  0% { 
    left: -250px; 
    opacity: 0; 
    transform: translateY(0) rotate(-2deg);
  }
  20% { 
    opacity: 0.7; 
    transform: translateY(10px) rotate(0.5deg);
  }
  45% {
    transform: translateY(-7px) rotate(-1deg);
  }
  70% {
    transform: translateY(8px) rotate(0.5deg);
  }
  90% { 
    opacity: 0.3; 
  }
  100% { 
    left: 120%; 
    opacity: 0; 
    transform: translateY(-5px) rotate(-2deg);
  }
}

.wind-leaf {
  position: absolute;
  font-size: 18px;
  z-index: var(--z-wind);
  animation: flyLeaf 9s ease-in-out infinite;
  filter: 
    drop-shadow(0 2px 4px rgba(0, 0, 0, 0.4))
    brightness(1.1);
  user-select: none;
  text-shadow: 0 0 8px rgba(255, 255, 255, 0.5);
  will-change: transform;
}

@keyframes flyLeaf {
  0% {
    transform: translateX(-120px) translateY(0) rotate(0deg) scale(0.4);
    opacity: 0;
  }
  12% {
    opacity: 0.9;
    transform: translateX(-60px) translateY(25px) rotate(60deg) scale(0.6);
  }
  30% {
    transform: translateX(0) translateY(-20px) rotate(120deg) scale(0.8);
  }
  50% {
    transform: translateX(60px) translateY(15px) rotate(180deg) scale(1);
  }
  70% {
    transform: translateX(120px) translateY(-25px) rotate(240deg) scale(0.9);
  }
  85% {
    transform: translateX(180px) translateY(10px) rotate(300deg) scale(0.7);
    opacity: 0.5;
  }
  100% {
    transform: translateX(240px) translateY(-15px) rotate(360deg) scale(0.5);
    opacity: 0;
  }
}

.sunny-sun {
  position: absolute;
  width: 160px;
  height: 160px;
  border-radius: 50%;
  top: 50px;
  right: 50px;
  background: radial-gradient(circle, 
    #ffe57f 0%, 
    #ffc107 25%,
    #ff9800 60%,
    transparent 85%);
  box-shadow: 
    0 0 120px 50px rgba(255, 215, 0, 0.9),
    0 0 240px 100px rgba(255, 152, 0, 0.4),
    inset 0 0 40px rgba(255, 255, 255, 0.8);
  animation: sunPulse 8s ease-in-out infinite;
  z-index: var(--z-sun);
  filter: brightness(1.1);
}

@keyframes sunPulse { 
  0%, 100% { 
    transform: scale(1) rotate(0deg); 
    opacity: 1; 
    box-shadow: 
      0 0 120px 50px rgba(255, 215, 0, 0.9),
      0 0 240px 100px rgba(255, 152, 0, 0.4);
  } 
  50% { 
    transform: scale(1.1) rotate(180deg); 
    opacity: 0.98; 
    box-shadow: 
      0 0 140px 60px rgba(255, 215, 0, 1),
      0 0 260px 110px rgba(255, 152, 0, 0.5);
  } 
}

.cloud-icon {
  position: absolute;
  font-size: 80px;
  line-height: 1;
  text-shadow: 
    0 4px 12px rgba(0, 0, 0, 0.5),
    0 0 20px rgba(255, 255, 255, 0.3);
  animation: moveCloudIcon 140s linear infinite;
  z-index: var(--z-clouds);
  user-select: none;
  filter: 
    drop-shadow(0 2px 8px rgba(255, 255, 255, 0.2))
    brightness(1.05);
  will-change: transform;
  transition: opacity 2s ease;
}

@keyframes moveCloudIcon { 
  0% { 
    left: -350px; 
    opacity: 0; 
    transform: translateY(0);
  } 
  5% { 
    opacity: 1; 
  } 
  90% { 
    opacity: 1; 
    transform: translateY(5px);
  } 
  95% {
    opacity: 0.8;
  }
  100% { 
    left: 120%; 
    opacity: 0; 
    transform: translateY(0);
  } 
}

.home-bg.windy .cloud-icon {
  animation-duration: 60s !important;
}

.fog-layer {
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 70%;
  background: linear-gradient(to top, 
    rgba(255, 255, 255, 0.9) 0%,
    rgba(255, 255, 255, 0.5) 30%,
    rgba(255, 255, 255, 0.2) 60%,
    transparent 100%);
  z-index: var(--z-fog);
  pointer-events: none;
  filter: blur(10px);
  animation: fogFloat 35s ease-in-out infinite alternate;
  mask-image: linear-gradient(to top, transparent 0%, black 30%);
}

.fog-1 {
  animation-duration: 40s;
  opacity: 0.3;
  background: linear-gradient(to top, 
    rgba(248, 249, 250, 0.9) 0%,
    rgba(233, 236, 239, 0.6) 40%,
    rgba(206, 212, 218, 0.3) 70%,
    transparent 100%);
}

.fog-2 {
  animation-duration: 45s;
  animation-delay: -15s;
  opacity: 0.2;
  filter: blur(8px);
  background: linear-gradient(to top, 
    rgba(241, 243, 245, 0.8) 0%,
    rgba(222, 226, 230, 0.5) 35%,
    rgba(173, 181, 189, 0.2) 65%,
    transparent 100%);
}

@keyframes fogFloat {
  0% { 
    transform: scaleY(1) translateY(0) scaleX(1); 
    filter: blur(10px);
  }
  100% { 
    transform: scaleY(1.15) translateY(-30px) scaleX(1.03); 
    filter: blur(18px);
  }
}

.error-message {
  background: linear-gradient(135deg, rgba(239, 68, 68, 0.95), rgba(220, 38, 38, 0.9));
  color: white;
  width: 93%;
  margin-bottom: 5%;
  padding: 8px 10px;
  border-radius: 20px;
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  display: flex;
  align-items: center;
  gap: 20px;
  animation: errorEntrance 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  max-width: 500px;
  box-shadow: 
    0 20px 40px rgba(239, 68, 68, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.error-icon {
  font-size: 32px;
  flex-shrink: 0;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
}

.error-content {
  flex: 1;
}

.error-title {
  font-size: 20px;
  font-weight: 700;
  margin: 0 0 8px 0;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.error-description {
  font-size: 15px;
  opacity: 0.9;
  margin: 0 0 20px 0;
  line-height: 1.5;
}

.error-retry-btn {
  background: rgba(255, 255, 255, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.3);
  color: white;
  padding: 10px 20px;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  font-size: 14px;
}

.error-retry-btn:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

@keyframes errorEntrance {
  0% {
    opacity: 0;
    transform: translateY(-20px) scale(0.9);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

@media (max-width: 768px) {
  .home-bg {
    padding: 16px;
    animation-duration: 30s;
  }

  .home-container {
    padding: 32px 28px;
    margin: 0;
    border-radius: 24px;
    max-width: 95%;
    min-width: unset;
    width: 100%;
  }

  .sunny-sun {
    width: 120px;
    height: 120px;
    top: 30px;
    right: 30px;
  }

  .cloud-icon {
    font-size: 60px;
    animation-duration: 100s;
  }

  .wind-line {
    width: 180px;
  }

  .error-message {
    padding: 24px 28px;
    flex-direction: column;
    text-align: center;
    gap: 16px;
  }
}

@media (max-width: 480px) {
  .home-container {
    padding: 24px 20px;
    border-radius: 20px;
  }

  .sunny-sun {
    width: 100px;
    height: 100px;
    top: 20px;
    right: 20px;
  }

  .cloud-icon {
    font-size: 50px;
    animation-duration: 80s;
  }

  .wind-leaf {
    font-size: 16px;
  }

  .error-message {
    padding: 20px 24px;
  }
}

@media (prefers-reduced-motion: reduce) {
  .home-bg,
  .raindrop,
  .wind-line,
  .wind-leaf,
  .sunny-sun,
  .cloud-icon,
  .fog-layer,
  .star,
  .snowflake,
  .home-container,
  .error-message {
    animation: none !important;
    transition: none !important;
  }
  
  .home-bg {
    animation: none;
  }
}

@media (prefers-contrast: high) {
  .home-container {
    background: rgba(0, 0, 0, 0.9);
    border: 2px solid white;
  }
  
  .error-message {
    background: #dc2626;
    border: 2px solid white;
    ;
  }
}

@media (prefers-color-scheme: dark) {
  .home-bg {
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
  }
}

.raindrop,
.wind-line,
.wind-leaf,
.sunny-sun,
.cloud-icon,
.fog-layer,
.star,
.snowflake {
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000;
}




/* ========================================================================= */
/* === SEARCH FORM STYLES (WeatherContainer.css) === */
/* ========================================================================= */

.search-container-wrapper {
    /* Form ve kartı dikeyde tutan genel kapsayıcı */
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    /* Kartın ve formun, animasyonların (z-index < 50) üzerinde kalmasını sağlar */
    z-index: 40; 
    position: relative;
    padding: 20px 0; /* Karttan ve sayfanın üstünden ayırmak için */
}

.city-search-form {
    display: flex;
    gap: 8px;
    margin-bottom: 25px; /* Karttan ayırmak için */
    width: 100%;
    max-width: 450px; /* Kart ile aynı genişlikte */
    position: relative;
    z-index: 51; 
}

.city-input {
    flex-grow: 1;
    padding: 12px 18px;
    /* Şeffaf Glass Morphism stilini kart ile uyumlu hale getirir */
    border: 1px solid rgba(255, 255, 255, 0.15); 
    border-radius: 12px;
    font-size: 16px;
    color: #ffffff;
    
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(15px);
    transition: all 0.3s ease;
}

.city-input:focus {
    outline: none;
    border-color: #00bcd4; /* Turkuaz odak rengi */
    box-shadow: 0 0 10px rgba(0, 188, 212, 0.5);
    background: rgba(255, 255, 255, 0.1);
}

.city-input::placeholder {
    color: rgba(255, 255, 255, 0.6);
}

.search-button {
    padding: 12px 20px;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    white-space: nowrap;
    
    /* Canlı Mavi/Turkuaz Gradyan */
    background: linear-gradient(45deg, #00BCD4 0%, #00838F 100%);
    color: #ffffff;
    box-shadow: 0 4px 15px rgba(0, 188, 212, 0.4);
    transition: all 0.3s ease;
}

.search-button:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 188, 212, 0.6);
}

.search-button:disabled {
    background: #607D8B;
    cursor: not-allowed;
    opacity: 0.7;
    box-shadow: none;
}

/* Mobil Uyumlu Tasarım */
@media (max-width: 480px) {
    .city-search-form {
        max-width: 90%; /* Yanlarda boşluk bırakır */
    }
    .search-button {
        padding: 12px 16px;
    }
}


/* ========================================================================= */
/* WeatherContainer.css - Arama Formu Stillerine Eklenmeli */
/* ========================================================================= */

.city-search-form {
    /* flex-grow: 1'e izin vermek için biraz daha geniş max-width */
    max-width: 500px; 
    /* Konum butonu için yer açar */
}

.location-button {
    /* Konum butonu stilizasyonu */
    padding: 12px;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    cursor: pointer;
    background: rgba(255, 255, 255, 0.1); /* Şeffaf arka plan */
    color: #ffffff;
    transition: all 0.3s ease;
    width: 45px; /* Sabit genişlik */
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
}

.location-button:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
    
}

.location-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Mobil İyileştirme */
@media (max-width: 480px) {
    .city-search-form {
        gap: 6px;
        max-width: 95%; 
    }
}
/* ========================================= */
/* === AY (MOON) STİLİ - DOLUNAY EFEKTİ İLE UYUMLU (Gelişmiş) === */
/* ========================================= */

/* Ayın Ana Konteyneri (Responsive Tasarım) */
.night-moon {
    position: absolute;
    top: 5vh; /* Dikeyde %5 */
    right: 5vw; /* Yatayda %5 */
    width: 80px; 
    height: 80px;
    
    /* Mobil cihazlar için boyutu küçültme */
    @media (max-width: 640px) {
        width: 60px;
        height: 60px;
        top: 3vh;
        right: 3vw;
    }

    border-radius: 50%;
    
    /* Dolunay olduğu için sadece çerçeve görevini sürdürür */
    background: transparent; 
    box-shadow: none;
    overflow: hidden; 
    z-index: 5;
    opacity: 0.9;
    transition: opacity 0.5s ease-in-out;
    
    /* Animasyon (Yavaş hareket) */
    animation: moonMove 180s linear infinite; 
}

/* Ayın Parlak Kısmı (Pseudo-Element ile Oluşturuluyor - Dolunayı ve Parıltıyı Oluşturur) */
.night-moon::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    
    /* Parlak Ay Rengi */
    background: #fdf6e3; 
    
    /* YENİ: Ay yüzeyine hafif ve gerçekçi doku (radial-gradient ile simülasyon) */
    background-image: 
        /* Büyük, yumuşak deniz simülasyonu */
        radial-gradient(circle at 35% 35%, rgba(150, 150, 150, 0.25) 15%, transparent 30%),
        /* Orta boy krater bölgesi */
        radial-gradient(circle at 75% 65%, rgba(150, 150, 150, 0.20) 8%, transparent 25%),
        /* Küçük krater noktası */
        radial-gradient(circle at 20% 70%, rgba(150, 150, 150, 0.15) 3%, transparent 15%);
    
    /* GÜNCELLENDİ: Atmosferik Parıltı (Daha az yoğun ve yumuşak) */
    box-shadow: 
        /* Daha az yoğun çekirdek parıltısı */
        0 0 10px 3px rgba(255, 255, 255, 0.7), 
        /* Orta seviye atmosferik bloom, daha az yayılım */
        0 0 30px 10px rgba(255, 255, 220, 0.4), 
        /* Hafif ve geniş halo (ışık halesi), düşük opaklık */
        0 0 60px 20px rgba(255, 255, 200, 0.1);
}

/* ❌ HİLAL GÖLGESİ (::after) KISMI TAMAMEN KALDIRILMIŞTIR. */


/* Ayın yavaşça ekran boyunca hareket etmesi için keyframes */
@keyframes moonMove {
    0% { transform: translate(0, 0) rotate(0deg); }
    50% { transform: translate(-20px, 20px) rotate(5deg); }
    100% { transform: translate(0, 0) rotate(0deg); }
}

/* ========================================= */
/* === GÖRÜNÜRLÜK UYARLAMALARI === */
/* ========================================= */

/* Bulutlu veya rüzgarlı havalarda hafifçe solması için */
.cloudy .night-moon,
.windy .night-moon {
    opacity: 0.6;
}

/* Yağmurlu, karlı veya sisliyse neredeyse görünmez olsun */
.rainy .night-moon,
.snowy .night-moon,
.foggy .night-moon {
    opacity: 0.1;
}

/* Arama Container */
.search-container-wrapper {
  position: relative;
  z-index: 10;
  max-width: 500px;
  margin: 0 auto;
  padding: 20px;
}

/* Başlık */
.search-header {
  text-align: center;
  margin-bottom: 30px;
}

.app-title {
  color: white;
  font-size: 2.5rem;
  font-weight: 700;
  margin: 0 0 8px 0;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.app-subtitle {
  color: rgba(255, 255, 255, 0.8);
  font-size: 1rem;
  margin: 0;
  font-weight: 400;
}

/* Arama Input Container */
.search-input-container {
  display: flex;
  align-items: center;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 16px;
  padding: 8px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  border: 2px solid transparent;
  transition: all 0.3s ease;
  backdrop-filter: blur(20px);
}

.search-input-container.focused {
  border-color: #3b82f6;
  box-shadow: 0 8px 32px rgba(59, 130, 246, 0.2);
  background: rgba(255, 255, 255, 1);
}

.search-input-container.error {
  border-color: #ef4444;
}

/* Input Wrapper */
.input-wrapper {
  position: relative;
  flex: 1;
  display: flex;
  align-items: center;
}

.search-icon {
  position: absolute;
  left: 12px;
  color: #6b7280;
  z-index: 2;
}

.city-input {
  width: 100%;
  padding: 12px 40px 12px 40px;
  border: none;
  background: transparent;
  font-size: 16px;
  color: #1f2937;
  outline: none;
  border-radius: 8px;
}

.city-input::placeholder {
  color: #9ca3af;
}

.city-input:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.clear-button {
  position: absolute;
  right: 8px;
  background: none;
  border: none;
  color: #9ca3af;
  cursor: pointer;
  padding: 4px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.clear-button:hover {
  background: #f3f4f6;
  color: #6b7280;
}

/* Butonlar */
.search-submit-button,
.location-button {
  background: #3b82f6;
  border: none;
  border-radius: 12px;
  color: white;
  cursor: pointer;
  padding: 10px;
  margin-left: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  min-width: 44px;
  min-height: 44px;
}

.search-submit-button:hover:not(:disabled),
.location-button:hover:not(:disabled) {
  background: #2563eb;
  transform: translateY(-1px);
}

.search-submit-button:disabled,
.location-button:disabled {
  background: #d1d5db;
  cursor: not-allowed;
  transform: none;
}

.location-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid transparent;
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Hata Mesajı */
.search-error-message {
  display: flex;
  align-items: center;
  gap: 8px;
  color: #ef4444;
  font-size: 14px;
  margin-top: 8px;
  padding: 8px 12px;
  background: rgba(239, 68, 68, 0.1);
  border-radius: 8px;
  border: 1px solid rgba(239, 68, 68, 0.2);
}

/* Öneri Listesi */
.suggestions-dropdown {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border-radius: 16px;
  margin-top: 8px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
  overflow: hidden;
  z-index: 1000;
  max-height: 300px;
  overflow-y: auto;
}

.suggestions-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  background: #f8fafc;
  border-bottom: 1px solid #e5e7eb;
  font-size: 12px;
  font-weight: 600;
  color: #6b7280;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.suggestions-count {
  background: #3b82f6;
  color: white;
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 11px;
}

.suggestion-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 16px;
  cursor: pointer;
  transition: background-color 0.2s ease;
  border-bottom: 1px solid #f3f4f6;
}

.suggestion-item:hover {
  background: #f8fafc;
}

.suggestion-item:last-child {
  border-bottom: none;
}

.suggestion-content {
  display: flex;
  flex-direction: column;
}

.district-name {
  font-weight: 600;
  color: #1f2937;
  font-size: 14px;
}

.city-name {
  color: #6b7280;
  font-size: 12px;
  margin-top: 2px;
}

.chevron-icon {
  color: #9ca3af;
}

/* Seçili Şehir Bilgisi */
.selected-city-info {
  margin: 20px 0;
  display: flex;
  justify-content: center;
}

.selected-city-badge {
  display: flex;
  align-items: center;
  gap: 8px;
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(10px);
  padding: 8px 16px;
  border-radius: 20px;
  color: white;
  font-size: 14px;
  font-weight: 500;
  border: 1px solid rgba(255, 255, 255, 0.2);
}

/* Hava Durumu Kartı */
.weather-card-wrapper {
  margin-top: 20px;
}

/* Responsive */
@media (max-width: 768px) {
  .search-container-wrapper {
    padding: 16px;
    max-width: 100%;
  }
  
  .app-title {
    font-size: 2rem;
  }
  
  .search-input-container {
    flex-direction: column;
    gap: 8px;
    padding: 12px;
  }
  
  .input-wrapper {
    width: 100%;
  }
  
  .search-submit-button,
  .location-button {
    width: 100%;
    margin-left: 0;
    min-height: 48px;
  }
  
  .suggestions-dropdown {
    position: fixed;
    top: auto;
    bottom: 0;
    left: 16px;
    right: 16px;
    max-height: 50vh;
    border-radius: 16px 16px 0 0;
  }
}import React, { useMemo, useState, useEffect } from "react";
import WeatherCard from "../WheatherCard/WeatherCard"; 
import Loader from "../Loader/Loader";
import { useLatestWeather } from "../../hooks/useLatestWeather"; 
import { useGeolocation } from "../../hooks/useGeolocation";
import citiesData from '../../data/cities.json'; // JSON dosyasını import edin
import "./WeatherContainer.css"; 

type WeatherCondition = 'güneşli' | 'bulutlu' | 'yağmurlu' | 'sağanak' | 'rüzgarlı' | 'puslu' | 'sisli' | 'gece' | 'açık' | 'karlı';

interface CityDistrict {
  ilce_id: string;
  ilce_adi: string;
  sehir_id: string;
  sehir_adi: string;
}

// JSON verisini kullanıyoruz
const cityData: CityDistrict[] = citiesData as CityDistrict[];

const checkIsNight = (currentHour: number): boolean => {
    return currentHour >= 20 || currentHour < 6;
};

const WeatherContainer: React.FC = () => {
  // State'ler
  const [selectedCity, setSelectedCity] = useState<CityDistrict | null>(null);
  const [searchInput, setSearchInput] = useState("");
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [searchError, setSearchError] = useState("");

  // Hook'lar
  const { coords, address, loading: geoLoading, error: geoError, retry: retryGeolocation } = useGeolocation();
  
  // Seçili şehre göre hava durumu verisi çek
  const fullAddress = selectedCity ? `${selectedCity.ilce_adi}, ${selectedCity.sehir_adi}` : "";
  const { data, forecast, loading: weatherLoading, error: weatherError } = useLatestWeather(fullAddress); 
  
  // Kombine durumlar
  const loading = geoLoading || weatherLoading;
  const error = weatherError || geoError;

  // Konum bulunduğunda otomatik seçim
  useEffect(() => {
    if (coords && address && !selectedCity) {
      // Konumdan gelen adresi şehir listesinde ara
      const foundCity = findCityByAddress(address);
      if (foundCity) {
        setSelectedCity(foundCity);
        setSearchInput(`${foundCity.ilce_adi}, ${foundCity.sehir_adi}`);
        setSearchError("");
      } else {
        setSearchError("Konumunuz listedeki şehirlerle eşleşmedi");
      }
    }
  }, [coords, address, selectedCity]);

  // Adresi şehir listesinde bulma fonksiyonu
  const findCityByAddress = (address: string): CityDistrict | null => {
    const lowerAddress = address.toLowerCase();
    
    // Önce tam eşleşme ara
    let found = cityData.find(city => 
      lowerAddress.includes(city.ilce_adi.toLowerCase()) || 
      lowerAddress.includes(city.sehir_adi.toLowerCase())
    );
    
    if (!found) {
      // Eğer tam eşleşme yoksa, parçalayarak ara
      const addressParts = lowerAddress.split(/[\s,]+/);
      found = cityData.find(city => 
        addressParts.some(part => 
          city.ilce_adi.toLowerCase().includes(part) || 
          city.sehir_adi.toLowerCase().includes(part)
        )
      );
    }
    
    return found || null;
  };

  // Filtrelenmiş şehirler
  const filteredCities = useMemo(() => {
    if (searchInput.length < 2) return [];
    
    const lowerInput = searchInput.toLowerCase().trim();
    
    return cityData
      .filter(city => 
        city.ilce_adi.toLowerCase().includes(lowerInput) ||
        city.sehir_adi.toLowerCase().includes(lowerInput) ||
        `${city.ilce_adi} ${city.sehir_adi}`.toLowerCase().includes(lowerInput)
      )
      .slice(0, 10);
  }, [searchInput]);

  // Şehir seçme işlevi
  const handleCitySelect = (city: CityDistrict) => {
    setSelectedCity(city);
    setSearchInput(`${city.ilce_adi}, ${city.sehir_adi}`);
    setShowSuggestions(false);
    setSearchError("");
  };

  // Arama işlevi
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!searchInput.trim()) {
      setSearchError("Lütfen bir şehir adı girin");
      return;
    }

    // Input'tan şehir bulmaya çalış
    const foundCity = findCityByAddress(searchInput);
    
    if (foundCity) {
      handleCitySelect(foundCity);
    } else {
      setSearchError("Geçerli bir il/ilçe bulunamadı. Lütfen listedeki şehirlerden birini seçin.");
    }
  };

  // Konum butonu işlevi
  const handleLocateMe = () => {
    if (geoLoading) return;
    setSelectedCity(null);
    setSearchInput("");
    setSearchError("");
    retryGeolocation();
  };

  // Hava durumu analizi (önceki kodun aynısı)
  const weatherAnalysis = useMemo(() => {
    if (!data) return null;
    
    const condition = data.condition.toLowerCase() as WeatherCondition;
    const windSpeed = data.wind || 0;
    const temp = data.temp || 20;

    const currentHour = new Date().getHours();
    const isNight = checkIsNight(currentHour);
    const isDaytime = !isNight;
    
    const isClearNight = isNight && (condition.includes("açık") || condition.includes("güneşli"));

    return {
      condition,
      windSpeed,
      temp,
      isRainy: condition.includes("yağmur") || condition.includes("sağanak"),
      isWindy: condition.includes("rüzgar") || windSpeed > 3,
      isFoggy: condition.includes("puslu") || condition.includes("sisli"),
      isCloudy: condition.includes("bulutlu"),
      isSunny: isDaytime && (condition.includes("güneşli") || condition.includes("açık")),
      isSnowy: condition.includes("karlı"), 
      isNight, 
      isDaytime, 
      isClearNight,
      isCold: temp < 5, 
      isHot: temp > 30
    };
  }, [data]);

  // Animasyon render (önceki kodun aynısı)
  const renderAnimation = useMemo(() => {
    if (!weatherAnalysis || !data) return null;

    const { 
      isRainy, isWindy, isFoggy, isCloudy, isSunny, isNight, isCold, isDaytime, isSnowy 
    } = weatherAnalysis;

    let drops: React.ReactNode = null;
    let winds: React.ReactNode = null;
    let leaves: React.ReactNode = null;
    let sun: React.ReactNode = null;
    let clouds: React.ReactNode = null;
    let fog: React.ReactNode = null;
    let stars: React.ReactNode = null;
    let snow: React.ReactNode = null;
    let moon: React.ReactNode = null; 

    // === STARS FOR NIGHT ===
    if (isNight && !isCloudy && !isRainy && !isSnowy && !isFoggy) { 
      stars = Array.from({ length: 80 }, (_, i) => (
        <div
          key={`star-${i}`}
          className="star"
          style={{
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
            animationDelay: `${Math.random() * 8}s`,
            animationDuration: `${3 + Math.random() * 4}s`,
            width: `${Math.random() * 2 + 1}px`,
            height: `${Math.random() * 2 + 1}px`,
          }}
        />
      ));
    }

    // === MOON EFFECT - GECE AÇIK HAVA İÇİN ===
    if (isNight && !isCloudy && !isRainy && !isSnowy && !isFoggy) {
      moon = (
        <div className="night-moon" />
      );
    }

    // === SNOW EFFECT - KARLI HAVA İÇİN ===
    if (isSnowy || (isCold && isCloudy)) {
      const snowflakeCount = isSnowy ? 120 : 80; 
      snow = Array.from({ length: snowflakeCount }, (_, i) => {
        const size = Math.random() * 4 + 2;
        const isLargeFlake = Math.random() > 0.7;
        const snowStyle: React.CSSProperties = {
          left: `${Math.random() * 100}%`,
          animationDelay: `${Math.random() * 10}s`,
          animationDuration: `${8 + Math.random() * 12}s`,
          width: `${size}px`,
          height: `${size}px`,
          opacity: 0.7 + Math.random() * 0.3,
          filter: `blur(${isLargeFlake ? '1px' : '0.5px'})`,
        };

        return (
          <div
            key={`snow-${i}`}
            className={`snowflake ${isLargeFlake ? 'large-flake' : ''} ${isWindy ? 'windy-snow' : ''}`}
            style={snowStyle}
          />
        );
      });
    }

    // === RAIN EFFECT - KARLI HAVADA YAĞMUR OLMASIN ===
    if (isRainy && !isSnowy) {
      const dropCount = isWindy ? 100 : 150;
      drops = Array.from({ length: dropCount }, (_, i) => {
        const isHeavyDrop = Math.random() > 0.7;
        const dropStyle: React.CSSProperties = {
          left: `${Math.random() * 100}%`,
          animationDelay: `${Math.random() * 2}s`,
          animationDuration: isWindy ? 
            `${0.4 + Math.random() * 0.3}s` : 
            `${0.8 + Math.random() * 0.4}s`,
          opacity: 0.6 + Math.random() * 0.4,
          width: isHeavyDrop ? '3px' : '2px',
          height: isHeavyDrop ? '20px' : '15px',
        };

        return (
          <div
            key={`rain-${i}`}
            className={`raindrop ${isHeavyDrop ? 'heavy-drop' : ''} ${isWindy ? 'windy-drop' : ''}`}
            style={dropStyle}
          />
        );
      });
    }

    // === ADVANCED WIND EFFECT ===
    if (isWindy) {
      winds = Array.from({ length: 15 }, (_, i) => {
        const windStyle: React.CSSProperties = {
          top: `${Math.random() * 100}%`,
          height: `${0.5 + Math.random() * 1.5}px`,
          animationDelay: `${Math.random() * 6}s`,
          animationDuration: `${1.5 + Math.random() * 2}s`,
          opacity: 0.15 + (Math.random() * 0.25),
          transform: `rotate(${Math.random() * 8 - 4}deg)`,
        };

        return (
          <div
            key={`wind-${i}`}
            className="wind-line"
            style={windStyle}
          />
        );
      });

      if (!isSunny && !isDaytime) {
        leaves = Array.from({ length: 12 }, (_, i) => {
          const leafStyle: React.CSSProperties = {
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
            animationDelay: `${Math.random() * 10}s`,
            animationDuration: `${5 + Math.random() * 8}s`,
            transform: `scale(${0.2 + Math.random() * 0.6})`,
            fontSize: `${14 + Math.random() * 10}px`,
          };

          return (
            <div
              key={`leaf-${i}`}
              className="wind-leaf"
              style={leafStyle}
            >
              {Math.random() > 0.5 ? '🍃' : '🌿'}
            </div>
          );
        });
      }
    }
    
    // === SUN EFFECT - GÜNDÜZ AÇIK HAVA İÇİN ===
    if (isDaytime && isSunny && !isRainy && !isCloudy && !isFoggy && !isSnowy) {
      sun = <div className="sunny-sun" />;
    }

    // === CLOUD EFFECT - KARLI HAVADA DA BULUT GÖSTER ===
    if (isCloudy || isRainy || isFoggy || isSnowy) {
      const cloudCount = (isRainy || isSnowy || isFoggy) ? (6 + Math.floor(Math.random() * 4)) : (3 + Math.floor(Math.random() * 3));
      const verticalStep = 20 / cloudCount;
      const baseTop = 5;

      clouds = Array.from({ length: cloudCount }, (_, i) => { 
        const duration = `${40 + Math.random() * 80}s`;
        const delay = `${Math.random() * -120}s`;
        const randomJitter = Math.random() * verticalStep * 0.6;
        const verticalPosition = `${baseTop + (i * verticalStep) + randomJitter}%`;
        const size = `${120 + Math.random() * 80}px`;

        return (
          <div 
            key={`cloud-${i}`} 
            className="cloud-icon"
            style={{ 
              animationDuration: duration,
              animationDelay: delay,
              top: verticalPosition,
              fontSize: size,
              opacity: 0.6 + Math.random() * 0.4,
            }}
          >
            ☁️
          </div>
        );
      });
    }

    // === FOG EFFECT - DAHA AZ OPACITY İLE ===
    if (isFoggy && !isSnowy) {
      fog = (
        <>
          <div className="fog-layer fog-1" />
          <div className="fog-layer fog-2" />
        </>
      );
    }
    
    return (
      <>
        {moon}
        {stars}
        {snow}
        {fog}
        {clouds}
        {sun}
        {winds}
        {leaves}
        {drops}
      </>
    );
  }, [weatherAnalysis, data]);

  // CSS sınıfları (önceki kodun aynısı)
  const containerClasses = useMemo(() => {
    if (!weatherAnalysis) return "weather-bg-container"; 
    
    const { condition, isWindy, isFoggy, isNight, isCloudy, isCold, isHot, isDaytime, isSnowy } = weatherAnalysis;
    
    const classes = [
      'weather-bg-container',
      condition.replace(/\s+/g, '-'),
      isWindy ? 'windy' : '',
      isFoggy ? 'foggy' : '',
      isNight ? 'night' : '',
      isCloudy ? 'cloudy' : '',
      isCold ? 'cold' : '',
      isHot ? 'hot' : '',
      isDaytime ? 'daytime' : '',
      isSnowy ? 'snowy' : '' 
    ];

    return classes.filter(Boolean).join(' ');
  }, [weatherAnalysis]);

  return (
    <div className={containerClasses}>
      <div className="background-overlay" />
      <div className="weather-background-vignette" />
      {renderAnimation}
      
      {/* Şehir Seçim Formu */}
      <div className="search-container-wrapper">
        <form onSubmit={handleSearch} className="city-search-form">
          <div className="search-input-wrapper">
            <input
              type="text"
              className="city-input"
              value={searchInput}
              onChange={(e) => {
                setSearchInput(e.target.value);
                setSearchError("");
                setShowSuggestions(e.target.value.length > 1);
              }}
              placeholder="İl veya ilçe adı girin (örn: Seyhan, Adana)"
              disabled={loading}
              onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}
              onFocus={() => setShowSuggestions(searchInput.length > 1)}
            />
            
            <button 
              type="submit" 
              className="search-button"
              disabled={loading}
            >
              {weatherLoading ? 'Yükleniyor...' : 'Ara'}
            </button>
            
            <button
              type="button"
              className="location-button"
              onClick={handleLocateMe}
              disabled={geoLoading || weatherLoading}
              title="Mevcut konumunuzu kullanın"
            >
              {geoLoading ? '🧭' : '📍'} 
            </button>
          </div>

          {/* Hata mesajı */}
          {searchError && (
            <div className="search-error-message">
              {searchError}
            </div>
          )}

          {/* Öneri listesi */}
          {showSuggestions && filteredCities.length > 0 && (
            <div className="suggestions-dropdown">
              {filteredCities.map((city) => (
                <div
                  key={`${city.ilce_id}-${city.sehir_id}`}
                  className="suggestion-item"
                  onMouseDown={() => handleCitySelect(city)}
                >
                  <span className="district-name">{city.ilce_adi}</span>
                  <span className="city-name">{city.sehir_adi}</span>
                </div>
              ))}
            </div>
          )}
        </form>

        {/* Seçili şehir bilgisi */}
        {selectedCity && (
          <div className="selected-city-info">
            <h2>{selectedCity.ilce_adi}, {selectedCity.sehir_adi}</h2>
          </div>
        )}

        {/* Hava Durumu İçeriği */}
        <div className="weather-card-wrapper">
          {loading && <Loader />}
          {error && (
            <div className="error-message">
              <div className="error-icon">⚠️</div>
              <div className="error-content">
                <h3 className="error-title">Hava Durumu Alınamadı</h3>
                <p className="error-description">{error}</p>
                <button 
                  className="error-retry-btn"
                  onClick={() => {
                    if (weatherError && selectedCity) {
                      // Seçili şehirle tekrar dene
                      setSelectedCity({...selectedCity});
                    } else {
                      retryGeolocation();
                    }
                  }} 
                >
                  {weatherError ? "Tekrar Dene" : "Konumu Tekrar Dene"}
                </button>
              </div>
            </div>
          )}
          {data && weatherAnalysis && selectedCity && (
            <WeatherCard 
              {...data} 
              forecast={forecast} 
              isNight={weatherAnalysis.isNight}
            />     
          )}
        </div>
      </div>
    </div>
  );
};

export default WeatherContainer; bu tasarımı iyileştir kullanılmayan css varsa sil bölünecek varsa böl ve bana öyle ver